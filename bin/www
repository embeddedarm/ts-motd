#!/usr/bin/env node

// SERVER SIDE

function getCanvas() {

    var _canvas = fabric.createCanvasForNode(1920,1080);
    var collection = app.db.addCollection('paths', {indices: ['uuid']});
    var fabricObjects = collection.find({uuid: { '$ne': ' ' }}).reverse();

    if(fabricObjects) {
        fabricObjects.forEach(function(obj) {
            // Revive the objects property for a group.
            if(obj.type === 'group') {
                obj.objects = obj.__objects;
            }
        });
    }

    fabric.util.enlivenObjects(fabricObjects, function(objects) {
        objects.forEach(function(o) {
            // Please note that a deserialize custom brush(stroke property) is
            // an anonymous function coming from the client. Potential recipe
            // for security issues(!).
            _canvas.add(o);
        });
    });

    return _canvas;
}

/**
 * Module dependencies.
 */

var app = require('../app').app;
var debug = require('debug')('ts-motd:server');
var http = require('http');
var chmod = require('chmod');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = require('../app').server;

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  var common = require('../lib/common.js');
  var _this = this;

  debug('Listening on ' + bind);

  // Specific server side application initialization
  console.log('Server listen on port ' + addr.port);

  app.fabric = require('fabric').fabric;
  GLOBAL.fabric = app.fabric;

  common.init(app);

  app.db = new loki('db.json', {
      autosave: true,
      autosaveInterval: 3000,
      autoload: true,
      autoloadCallback: function() {
          // if database did not exist it will be empty so I will intitialize here
          var collection = app.db.getCollection('paths')
          if (!collection) {
              collection = app.db.addCollection('paths', {indices: ['uuid']});
              collection.ensureUniqueIndex('uuid');
          }

          app.canvas = getCanvas();
      },
      env: 'NODEJS',
  });

  // This needs to be r/w for everybody, else Stranger Things happen 
  chmod('db.json', 777);

}
